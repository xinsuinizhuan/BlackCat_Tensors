
template<typename T, typename J> __global__  static void copy2d(T t, const J j) {
    int n = blockIdx.y * blockDim.y + threadIdx.y;
    for (; n < j.cols(); n += blockDim.y * gridDim.y) {

        int m = blockIdx.x * blockDim.x + threadIdx.x;
        for (; m < j.rows(); m += blockDim.x * gridDim.x) {
            t(m, n) = j(m, n);
        }
    }
}
template<typename T, typename J> __global__ static void copy3d(T t, const J j) {
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    for (; k < j.dimension(2); k += blockDim.z * gridDim.z) {
        int n = blockIdx.y * blockDim.y + threadIdx.y;
        for (; n < j.cols(); n += blockDim.y * gridDim.y) {

            int m = blockIdx.x * blockDim.x + threadIdx.x;
            for (; m < j.rows(); m += blockDim.x * gridDim.x) {
                t(m,n,k) = j(m,n,k);
            }
        }
    }
}
//dont know how to do this
template<typename T, typename J> __global__ static void copy4d(T t, const J j) {
    for (int l = 0; l < j.dimension(3); ++l)
        for (int k = 0; k < j.dimension(2); ++k)
            for (int n = 0; n < j.cols(); ++n)
                for (int m = 0; m < j.rows(); ++m)
                    t(m,n,k,l) = j(m,n,k,l);
}
//don't know how to do this
template<typename T, typename J> __global__ static void copy5d(T t, const J j) {
    for (int p = 0; p < j.dimension(4); ++p)
        for (int l = 0; l < j.dimension(3); ++l)
            for (int k = 0; k < j.dimension(2); ++k)
                for (int n = 0; n < j.dimension(1); ++n)
                    for (int m = 0; m < j.dimension(0); ++m)
                        t(m, n, k, l, p) = j(m, n, k, l, p);
}