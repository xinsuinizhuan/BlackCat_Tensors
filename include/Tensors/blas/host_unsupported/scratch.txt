                template<class T, class U>
        static void copy(T to, U from) {
#ifndef BC_NO_OPENMP
#pragma omp parallel for
#endif
            for (int i = 0; i < to.size(); i ++) {
                to[i] = from[i];
            }
#ifndef BC_NO_OPENMP
#pragma omp barrier
#endif
        }
        
        template<class T, class U>
        static void copy(T to, U from) {
#ifndef BC_NO_OPENMP
#pragma omp parallel for
#endif
            for (int n = 0; n < to.dimension(1); ++n)
                for (int m = 0; m < to.dimension(0); ++m)
                    to(m,n) = from(m,n);
#ifndef BC_NO_OPENMP
#pragma omp barrier
#endif
        }
        
        
                template<class T, class U>
        static void copy(T to, U from) {
#ifndef BC_NO_OPENMP
#pragma omp parallel for
#endif
            for (int k = 0; k < to.dimension(2); ++k)
                for (int n = 0; n < to.dimension(1); ++n)
                    for (int m = 0; m < to.dimension(0); ++m)
                        to(m,n,k) = from(m,n,k);

#ifndef BC_NO_OPENMP
#pragma omp barrier
#endif
        }
        
        
                template<class T, class U>
        static void copy(T to, U from) {
#ifndef BC_NO_OPENMP
#pragma omp parallel for
#endif
            for (int p = 0; p < to.dimension(3); ++p)
                for (int k = 0; k < to.dimension(2); ++k)
                    for (int n = 0; n < to.dimension(1); ++n)
                        for (int m = 0; m < to.dimension(0); ++m)
                            to(m, n, k, p) = from(m, n, k, p);

#ifndef BC_NO_OPENMP
#pragma omp barrier
#endif
        }
        
        
                template<class T, class U>
        static void copy(T to, U from) {
#ifndef BC_NO_OPENMP
#pragma omp parallel for
#endif
            for (int j = 0; j < to.dimension(4); ++j)
                for (int p = 0; p < to.dimension(3); ++p)
                    for (int k = 0; k < to.dimension(2); ++k)
                        for (int n = 0; n < to.dimension(1); ++n)
                            for (int m = 0; m < to.dimension(0); ++m)
                                to(m, n, k, p, j) = from(m, n, k, p, j);

#ifndef BC_NO_OPENMP
#pragma omp barrier
#endif
        }
        
        
                template<class T, class U>
        static void copy(T to, U from) {
            run::copy(to, from);
        }